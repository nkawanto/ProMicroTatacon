/*
 * Pro micro drum controller for Taiko no Tatsujin
 * Copyright (C) 2019 Nicholas K. Kawanto
 * Email: nkawanto@gmail.com
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/


//**IN PROGRESS**

#include <Keyboard.h>

//Defines, adjust accordingly
//Based on LDT0-028K
#define NUM_PIEZO 4
#define LKAT_THRESHOLD  5
#define LDON_THRESHOLD 5
#define RDON_THRESHOLD 5
#define RKAT_THRESHOLD 5

//This is an arbitrary number I put; I found 15ms gap inbetween peaks
//sufficient to eliminate the noise generated by the initial impact,
//while still allowing you to do drumrolls.
#define TIME_BETWEEN_PEAKS 15

int lastPeakTime[NUM_PIEZO];
int threshold[NUM_PIEZO];
char key[NUM_PIEZO];
float input[NUM_PIEZO];

//Da-don
void setup() {
	Serial.begin(9600);
	for (int i = 0; i < NUM_PIEZO; i++) {
		lastPeakTime[i] = 0;
		input[i] = 0;
	}

	threshold[0] = LKAT_THRESHOLD;
	threshold[1] = LDON_THRESHOLD;
	threshold[2] = RDON_THRESHOLD;
	threshold[3] = RKAT_THRESHOLD;

	//dfjk is the default kddk input, may be customized depending on your key bindings da-don
	key[0] = 'd';
	key[1] = 'f';
	key[2] = 'j';
	key[3] = 'k';
}

void loop() {
	int currentTime = millis();

	//Feed piezo input values into array da-don
	for (int i = 0; i < NUM_PIEZO; i++) {
		input[i] = analogRead(i);
	}

	//Chances of kat being hit da-don
	if (input[0] + input[3] > input[1] + input[2]) {

		//Chances of double kat da-don (ratio of both inputs are +-20% da-don)
		float ratio = input[0] / input[3];
		if (ratio > 0.8 && ratio < 1.25) {
			if (currentTime - lastPeakTime[0] >= TIME_BETWEEN_PEAKS || currentTime - lastPeakTime[3] >= TIME_BETWEEN_PEAKS) {
				keyPress(0, input[0], currentTime);
				keyPress(3, input[3], currentTime);
			}
		}

		//cCances of single kat da-don
		else {
			//Determine the side being hit da-don
			int max = 3;
			if (input[0] > input[3])
				max = 0;

			if (currentTime - lastPeakTime[max] >= TIME_BETWEEN_PEAKS)
				keyPress(max, input[max], currentTime);
		}

	}

	//Chances of don being hit da-don
	else {

		//Chances of double don da-don (ratio of both inputs are +-20% da-don)
		float ratio = input[1] / input[2];
		if (ratio > 0.8 && ratio < 1.25) {
			if (currentTime - lastPeakTime[1] >= TIME_BETWEEN_PEAKS || currentTime - lastPeakTime[2] >= TIME_BETWEEN_PEAKS) {
				keyPress(1, input[1], currentTime);
				keyPress(2, input[2], currentTime);
			}
		}

		//Chances of single don da-don
		else {
			//Determine the side being hit da-don
			int max = 2;
			if (input[1] > input[2])
				max = 1;

			if (currentTime - lastPeakTime[max] >= TIME_BETWEEN_PEAKS)
				keyPress(max, input[max], currentTime);
		}
	}
}

//To simulate keyboard press using Keyboard.h da-don
void keyPress(int slot, float strength, int currentTime) {
	if (strength > threshold[slot]) {
		Keyboard.write(key[slot]);
		lastPeakTime[slot] = currentTime;
	}
}