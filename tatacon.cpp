/*
 * Pro micro drum controller for Taiko no Tatsujin
 * Copyright (C) 2019 Nicholas K. Kawanto
 * Email: nkawanto@gmail.com
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/


//**IN PROGRESS**

#include <Keyboard.h>

//Defines, adjust accordingly - will depend on surface thickness
//Based on LDT0-028K
#define NUM_PIEZO 4
#define LKAT_THRESHOLD  5
#define LDON_THRESHOLD 5
#define RDON_THRESHOLD 5
#define RKAT_THRESHOLD 5

//This is an arbitrary number I put; I found 10ms gap inbetween peaks
//sufficient to eliminate the noise generated by the initial impact,
//while still detecting drumrolls effectively.
#define TIME_BETWEEN_PEAKS 10

int lastPeakTime;
int threshold[NUM_PIEZO];
char key[NUM_PIEZO];
float input[NUM_PIEZO];
int currentTime;

//Da-don
void setup() {
	lastPeakTime = 0;
	currentTime = 0;
	Serial.begin(9600);
	for (int i = 0; i < NUM_PIEZO; i++) {
		lastPeakTime[i] = 0;
		input[i] = 0;
	}

	threshold[0] = LKAT_THRESHOLD;
	threshold[1] = LDON_THRESHOLD;
	threshold[2] = RDON_THRESHOLD;
	threshold[3] = RKAT_THRESHOLD;

	//dfjk is the default kddk input, may be customized depending on your key bindings da-don
	key[0] = 'd';
	key[1] = 'f';
	key[2] = 'j';
	key[3] = 'k';
}

void loop() {
	bool donHit = false;
	currentTime = millis();
	int maxSlot = 0;
	int ratio = 0;
	//Feed piezo input values into array da-don
	for (int i = 0; i < NUM_PIEZO; i++) {
		//diff from threshold
		input[i] = analogRead(i) - threshold[i];
	}

	//if lkat+rkat < ldon+rdon
	if (input[0] + input[3] < input[1] + input[2]) {
		ratio = input[1] / input[2];
		//if both hit, tolerance +-20%
		if (ratio >= 0.8 && ratio <= 1.25) {
			keyPress(1);
			keyPress(2);
		}
		else if (input[1] > input[2])
			keyPress(1);
		else
			keyPress(2);
		lastPeakTime = currentTime;
	}

	//if lkat+rkat>ldon+rdon
	else {
		ratio = input[0] / input[3];
		//if both hit, tolerance +-20%
		if (ratio >= 0.8 && ratio <= 1.25) {
			keyPress(0);
			keyPress(3);
		}
		else if (input[0] > input[3])
			keyPress(0);
		else
			keyPress(3);
		lastPeakTime = currentTime;
	}

}

//To simulate keyboard press using Keyboard.h da-don
void keyPress(int slot) {
	if (lastPeakTime - currentTime > TIME_BETWEEN_PEAKS)
		Keyboard.write(keys);
}